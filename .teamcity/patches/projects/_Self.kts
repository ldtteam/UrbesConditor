package patches.projects

import jetbrains.buildServer.configs.kotlin.v2019_2.*
import jetbrains.buildServer.configs.kotlin.v2019_2.projectFeatures.DockerRegistryConnection
import jetbrains.buildServer.configs.kotlin.v2019_2.projectFeatures.dockerRegistry
import jetbrains.buildServer.configs.kotlin.v2019_2.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the root project
accordingly, and delete the patch script.
*/
changeProject(DslContext.projectId) {
    params {
        expect {
            password("env.DOCKER_PASSWORD", "credentialsJSON:6d6b0058-18ff-4648-9393-a3ce7a3c66b1", label = "Docker password", description = "The password used to connect to the docker registry during docker operations.")
        }
        update {
            password("env.DOCKER_PASSWORD", "credentialsJSON:005f12d7-0753-4116-809e-e963ed88b60f", label = "Docker password", description = "The password used to connect to the docker registry during docker operations.")
        }
        expect {
            text("env.DOCKER_USERNAME", "LDTTeamCICD", label = "Docker Username", description = "The username of the user used to connect to the docker registry during docker operations.", allowEmpty = true)
        }
        update {
            text("env.DOCKER_USERNAME", "ldtteam.teamcity", label = "Docker Username", description = "The username of the user used to connect to the docker registry during docker operations.", allowEmpty = true)
        }
    }

    features {
        val feature1 = find<DockerRegistryConnection> {
            dockerRegistry {
                id = "PROJECT_EXT_9"
                name = "LDTTeam Docker Container Registry"
                url = "https://container.ldtteam.com"
                userName = "LDTTeamCICD"
                password = "credentialsJSON:48666a0d-3b34-4243-8c9d-e1a9fb4d4148"
            }
        }
        feature1.apply {
            userName = "ldtteam.teamcity"
            password = "credentialsJSON:005f12d7-0753-4116-809e-e963ed88b60f"
        }
    }

    expectSubProjectsOrder(RelativeId("Minecolonies"), RelativeId("Aequivaleo"), RelativeId("Structurize"), RelativeId("DomumOrnamentum"), RelativeId("PistonUnlimited"), RelativeId("BlockOut"), RelativeId("Animatrix"), RelativeId("PerViamInvenire"), RelativeId("BlockUI"), RelativeId("DataGenerators"), RelativeId("GraphicsExpanded"), RelativeId("MinecoloniesWiki"))
    subProjectsOrder = arrayListOf(RelativeId("Minecolonies"), RelativeId("Structurize"), RelativeId("DomumOrnamentum"), RelativeId("BlockUI"), RelativeId("Aequivaleo"), RelativeId("PistonUnlimited"), RelativeId("Animatrix"), RelativeId("PerViamInvenire"), RelativeId("DataGenerators"), RelativeId("GraphicsExpanded"), RelativeId("BlockOut"), RelativeId("Serverpacklocator"), RelativeId("MinecoloniesWiki"), RelativeId("MinecoloniesWebsite"))
}
